@inject AuthenticationStateProvider AuthenticationState
@inject IResolutionService ResolutionService


<select @onchange="ResolutionSelected">
    <option value="0">resolution year</option>
    @foreach (var resolution in resolutions)
    {
        <option value="@resolution.Id">
            @resolution.Year
        </option>
    }
</select>

@code {

    [Parameter]
    public Resolution? Resolution { get; set; }

    [Parameter]
    public EventCallback<Resolution> ResolutionChanged { get; set; }

    private List<Resolution> resolutions { get; set; } = default!;

    protected async override System.Threading.Tasks.Task OnInitializedAsync()
    {
        var authenticationState = await AuthenticationState.GetAuthenticationStateAsync();
        var user = authenticationState.User;
        var username = user!.Identity!.Name;
        if (username is not null)
            resolutions = ResolutionService.GetAll(username);
    }


    private System.Threading.Tasks.Task ResolutionSelected(ChangeEventArgs changeEventArgs)
    {
        Resolution = ResolutionService.Get(Convert.ToInt32(changeEventArgs.Value!));
        return ResolutionChanged.InvokeAsync(Resolution);
    }
}
